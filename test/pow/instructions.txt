geth准备操作

删除区块存储文件：

rm -rf signer1/data/geth signer1/data/SN

创建新用户：

geth --datadir signer1/data account new

初始化pow,启动控制台：


geth --datadir signer1/data init pow.json

geth --datadir signer1/data --networkid 55661 --port 2007 --unlock e8253cd063fb0b97defe6531778d845d4eff0a74 --password signer1/passwd.txt console



====================================================================================================================
//部署合约

abi=[{"constant":false,"inputs":[{"name":"tempcost","type":"uint256"},{"name":"cmts_o","type":"bytes32"},{"name":"addrU","type":"address"}],"name":"Claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"disti","type":"uint256"},{"name":"refund","type":"uint256"},{"name":"cmts_u","type":"bytes32"}],"name":"Divide","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"ev","outputs":[{"name":"cmts_U","type":"bytes32"},{"name":"cmts_O","type":"bytes32"},{"name":"addressowner","type":"address"},{"name":"fees","type":"uint256"},{"name":"subcosts","type":"uint256"},{"name":"subdists","type":"uint256"},{"name":"costi","type":"uint256"},{"name":"refundi","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"fee","type":"uint256"},{"name":"subcost","type":"uint256"},{"name":"subdist","type":"uint256"}],"name":"Init","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]

bin="0x608060405234801561001057600080fd5b5061060d806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634898f4451461006757806392d4bf89146100c2578063cf61bde814610107578063f1bd4f3f146101cb575b600080fd5b34801561007357600080fd5b506100c0600480360381019080803590602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061020c565b005b3480156100ce57600080fd5b50610105600480360381019080803590602001909291908035906020019092919080356000191690602001909291905050506102a5565b005b34801561011357600080fd5b50610148600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104a2565b60405180896000191660001916815260200188600019166000191681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b3480156101d757600080fd5b5061020a60048036038101908080359060200190929190803590602001909291908035906020019092919050505061050a565b005b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401548314156102a057816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181600019169055505b505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401540281151561033657fe5b046000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601819055506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301540390508281141561049c57826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070181905550816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181600019169055505b50505050565b60006020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060154908060070154905088565b826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055505050505600a165627a7a72305820b50961fbe34d8a1c2fa540d503177c81e0c329e0a965fb1f8e4bc4825acef9200029"

Mycon=eth.contract(abi)

Mycon.new({from:eth.accounts[0],data:bin,gas:1000000,gasprice:"0x1"})



//记下合约地址

addr=""




//查看合约地址里面的状态参数

eth.getStorageAt(addr,"0x5")

map类型：映射表中成员位置的计算如下：geth控制台自带的web3库可以用来进行这个计算：

> var key = "000000000000000000000000e8253cd063fb0b97defe6531778d845d4eff0a74" + "0000000000000000000000000000000000000000000000000000000000000001"
undefined 
或者
> var key = "0x + key地址(40) + 0(23) + 位置序号(1)"

> web3.sha3(key, {"encoding": "hex"})
"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9"
现在可以提取指定位置的值了



====================================================================================================================
//evRental-Transaction
测试数据：
计算规则：subcost = dist × 5
fees：100  dist：16 subdist：20 subcost：80 

user1：disti：8 costi：32 refundi:68
user2：disti：5 costi：20 refundi:80
user3：disti：7 costi：28 refundi:72

//owner 部署智能合约

//user Cost fees：100   gasused：21000
eth.sendConvertTransaction({from:eth.accounts[0],fees:"0x64"})

//user Commit fees：100  gasused：82490
eth.sendCommitTransaction({from:eth.accounts[0],to:addr,fees:"0x64"})

//owner declare  gasused:45752
eth.sendDeclareTransaction({from:eth.accounts[1],to:addr,subcosts:"0x50",dists:"0x10",addru:eth.accounts[0]})

//user Divide  disti:8  gasused:85712
eth.sendClaimTransaction({from:eth.accounts[0], to:addr, disti:"0x8"})


//owner Collect  cost:80   gasused:21000
eth.sendDepositsgTransaction({from:eth.accounts[0], value:"0x32"})

//user Refund refundi:68  gasused:21000
eth.sendRefundTransaction({from:eth.accounts[0], value:"0x44"})













vehicloak测试交易

五种交易都能独立完成，只需要一个账户即可：

eth.sendMintTransaction({from:eth.accounts[0]})

eth.sendConvertTransaction({from:eth.accounts[0]})

eth.sendCommitTransaction({from:eth.accounts[0], to:addr})

eth.sendClaimTransaction({from:eth.accounts[0], to:addr, addrA:eth.accounts[0]})

eth.sendRefundTransaction({from:eth.accounts[0], to:addr})

eth.sendDepositsgTransaction({from:eth.accounts[0],N:"0x0"})



多账户交易测试

生成多个账户：

arr=personal.newAccounts(20)

为每个账户充值：

eth.setBalance(eth.accounts[0], arr, "0x1000000000")

(记得挖矿)

使用一次发送多笔交易的函数，依次测试convert,commit,claim,refund,deposit：

eth.sendMultiTransactions(1,{froms:arr})

eth.sendMultiTransactions(21,{froms:arr,to:addr})

eth.sendMultiTransactions(3,{froms:arr,to:addr,addrAs:arr})

eth.sendMultiTransactions(4,{froms:arr,to:addr})

eth.sendMultiTransactions(5,{froms:arr,N:"0x0"})


=====================================================================================================================











